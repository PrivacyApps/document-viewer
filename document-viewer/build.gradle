apply plugin: 'com.android.application'

dependencies {
    compile 'jcifs:jcifs:1.3.17'
    compile 'com.android.support:support-v4:24.1.1'
    compile 'ch.acra:acra:4.9.0'
}

import java.util.regex.Pattern
def getVerCode() {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def version = Integer.parseInt(matcher.group(1))
    return version
}

// map for the version code
ext.versionCodes = ['armeabi': 1, 'armeabi-v7a':2, 'x86':3, 'mips':4, 'arm64-v8a':5, 'x86_64':6, 'mips64':7]

import com.android.build.OutputFile

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64', 'x86', 'x86_64'
            universalApk false
        }
    }

    applicationVariants.all { variant ->
      variant.outputs.each { output ->
        output.versionCodeOverride =
          project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) + getVerCode()
      }
    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        
        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }
    
    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
    }
}

